rg=rg-privendpoint
location1=centralindia
location2=eastus2
location3=uksouth

hub1_vnet_name=hub1
hub1_vnet_address=10.1.0.0/16
hub1_gw_subnet_name=gw
hub1_gw_subnet_address=10.1.0.0/24
hub1_vm_subnet_name=vm
hub1_vm_subnet_address=10.1.1.0/24

spoke1_vnet_name=spoke1
spoke1_vnet_address=10.11.0.0/16
spoke1_vm_subnet_name=vm
spoke1_vm_subnet_address=10.11.1.0/24

spoke2_vnet_name=spoke2
spoke2_vnet_address=10.12.0.0/16
spoke2_vm_subnet_name=vm
spoke2_vm_subnet_address=10.12.1.0/24

onprem1_vnet_name=onprem1
onprem1_vnet_address=172.21.0.0/16
onprem1_gw_subnet_name=gw
onprem1_gw_subnet_address=172.21.0.0/24
onprem1_vm_subnet_name=vm
onprem1_vm_subnet_address=172.21.1.0/24

admin_username=$(whoami)
admin_password=Test#123#123
myip=$(curl -s4 https://ifconfig.co/)

psk=secret12345
vm_size=Standard_B2ats_v2

cloudinit_file=cloudinit.txt
cat <<EOF > $cloudinit_file
#cloud-config
runcmd:
  - curl -s https://deb.frrouting.org/frr/keys.gpg | sudo tee /usr/share/keyrings/frrouting.gpg > /dev/null
  - echo deb [signed-by=/usr/share/keyrings/frrouting.gpg] https://deb.frrouting.org/frr \$(lsb_release -s -c) frr-stable | sudo tee -a /etc/apt/sources.list.d/frr.list
  - sudo apt update && sudo apt install -y frr frr-pythontools
  - sudo apt install -y strongswan inetutils-traceroute net-tools
  - sudo sed -i "/bgpd=no/ s//bgpd=yes/" /etc/frr/daemons
  - sudo service frr restart
  - cp /etc/ipsec.conf /etc/ipsec.conf.bak
  - cp /etc/ipsec.secrets /etc/ipsec.secrets.bak
  - echo "net.ipv4.conf.all.forwarding=1" | sudo tee -a /etc/sysctl.conf
  - echo "net.ipv4.conf.default.forwarding=1" | sudo tee -a /etc/sysctl.conf
  - sudo sysctl -p
  - sudo apt install hping3
EOF

# Resource Groups
echo -e "\e[1;36mCreating $rg Resource Group...\e[0m"
az group create -l $location1 -n $rg -o none

# hub1 vnet
echo -e "\e[1;36mCreating $hub1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $hub1_vnet_name -l $location1 --address-prefixes $hub1_vnet_address --subnet-name $hub1_vm_subnet_name --subnet-prefixes $hub1_vm_subnet_address -o none
az network vnet subnet create -g $rg -n gw --address-prefixes $hub1_gw_subnet_address --vnet-name $hub1_vnet_name -o none

# hub1-gw vm
echo -e "\e[1;36mDeploying $hub1_vnet_name VM...\e[0m"
az network public-ip create -g $rg -n $hub1_vnet_name-gw -l $location1 --allocation-method Static --sku Basic -o none
az network nic create -g $rg -n $hub1_vnet_name-gw -l $location1 --vnet-name $hub1_vnet_name --subnet $hub1_gw_subnet_name --ip-forwarding true --public-ip-address $hub1_vnet_name-gw -o none
az vm create -g $rg -n $hub1_vnet_name-gw -l $location1 --image Ubuntu2404 --nics $hub1_vnet_name-gw --os-disk-name $hub1_vnet_name-gw --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file --no-wait
hub1_gw_pubip=$(az network public-ip show -g $rg -n $hub1_vnet_name-gw --query ipAddress -o tsv | tr -d '\r') && echo $hub1_vnet_name-gw public ip: $hub1_gw_pubip
hub1_gw_private_ip=$(az network nic show -g $rg -n $hub1_vnet_name-gw --query ipConfigurations[0].privateIPAddress -o tsv | tr -d '\r') && echo $hub1_vnet_name-gw private ip: $hub1_gw_private_ip

# onprem1 vnet
echo -e "\e[1;36mCreating $onprem1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $onprem1_vnet_name -l $location1 --address-prefixes $onprem1_vnet_address --subnet-name $onprem1_vm_subnet_name --subnet-prefixes $onprem1_vm_subnet_address -o none
az network vnet subnet create -g $rg -n $onprem1_gw_subnet_name --address-prefixes $onprem1_gw_subnet_address --vnet-name $onprem1_vnet_name -o none

# onprem1 gw vm
echo -e "\e[1;36mDeploying $onprem1_vnet_name-gw VM...\e[0m"
az network public-ip create -g $rg -n $onprem1_vnet_name-gw -l $location1 --allocation-method Static --sku Basic -o none
az network nic create -g $rg -n $onprem1_vnet_name-gw -l $location1 --vnet-name $onprem1_vnet_name --subnet $onprem1_gw_subnet_name --ip-forwarding true --public-ip-address $onprem1_vnet_name-gw -o none
az vm create -g $rg -n $onprem1_vnet_name-gw -l $location1 --image Ubuntu2404 --nics $onprem1_vnet_name-gw --os-disk-name $onprem1_vnet_name-gw --size $vm_size --admin-username $admin_username --generate-ssh-keys --custom-data $cloudinit_file --no-wait
# onprem1 gw details
onprem1_gw_pubip=$(az network public-ip show -g $rg -n $onprem1_vnet_name-gw --query ipAddress -o tsv | tr -d '\r') && echo $onprem1_vnet_name-gw public ip: $onprem1_gw_pubip
onprem1_gw_private_ip=$(az network nic show -g $rg -n $onprem1_vnet_name-gw --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r')  && echo $onprem1_vnet_name-gw private ip: $onprem1_gw_private_ip

# spoke1 vnet
echo -e "\e[1;36mCreating $spoke1_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke1_vnet_name -l $location1 --address-prefixes $spoke1_vnet_address --subnet-name $spoke1_vm_subnet_name --subnet-prefixes $spoke1_vm_subnet_address -o none

# spoke1 vm
echo -e "\e[1;36mDeploying $spoke1_vnet_name VM...\e[0m"
az network nic create -g $rg -n $spoke1_vnet_name -l $location1 --vnet-name $spoke1_vnet_name --subnet $spoke1_vm_subnet_name -o none
az vm create -g $rg -n $spoke1_vnet_name -l $location1 --image Ubuntu2404 --nics $spoke1_vnet_name --os-disk-name $spoke1_vnet_name --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait
# spoke1 details
spoke1_private_ip=$(az network nic show -g $rg -n $spoke1_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r')  && echo $spoke1_vnet_name private ip: $spoke1_private_ip

# spoke2 vnet
echo -e "\e[1;36mCreating $spoke2_vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $spoke2_vnet_name -l $location2 --address-prefixes $spoke2_vnet_address --subnet-name $spoke2_vm_subnet_name --subnet-prefixes $spoke2_vm_subnet_address -o none

# spoke2 vm
echo -e "\e[1;36mDeploying $spoke2_vnet_name VM...\e[0m"
az network nic create -g $rg -n $spoke2_vnet_name -l $location2 --vnet-name $spoke2_vnet_name --subnet $spoke2_vm_subnet_name -o none
az vm create -g $rg -n $spoke2_vnet_name -l $location2 --image Ubuntu2404 --nics $spoke2_vnet_name --os-disk-name $spoke2_vnet_name --size $vm_size --admin-username $admin_username --generate-ssh-keys --no-wait
# spoke2 details
spoke2_private_ip=$(az network nic show -g $rg -n $spoke2_vnet_name --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r')  && echo $spoke2_vnet_name private ip: $spoke2_private_ip

# VNet Peering between hub1 and spoke1
echo -e "\e[1;36mCreating VNet peerring between $hub1_vnet_name and $spoke1_vnet_name...\e[0m"
az network vnet peering create -g $rg -n $hub1_vnet_name-to-$spoke1_vnet_name-peering --remote-vnet $spoke1_vnet_name --vnet-name $hub1_vnet_name --allow-forwarded-traffic --allow-vnet-access -o none
az network vnet peering create -g $rg -n $spoke1_vnet_name-to-$hub1_vnet_name-peering --remote-vnet $hub1_vnet_name --vnet-name $spoke1_vnet_name --allow-forwarded-traffic --allow-vnet-access -o none

# VNet Peering between hub1 and spoke2
echo -e "\e[1;36mCreating VNet peerring between $hub1_vnet_name and $spoke2_vnet_name...\e[0m"
az network vnet peering create -g $rg -n $hub1_vnet_name-to-$spoke2_vnet_name-peering --remote-vnet $spoke2_vnet_name --vnet-name $hub1_vnet_name --allow-forwarded-traffic --allow-vnet-access -o none
az network vnet peering create -g $rg -n $spoke2_vnet_name-to-$hub1_vnet_name-peering --remote-vnet $hub1_vnet_name --vnet-name $spoke2_vnet_name --allow-forwarded-traffic --allow-vnet-access -o none

# spoke1 route table
echo -e "\e[1;36mDeploying $spoke1_vnet_name route table and attaching it to $spoke1_vm_subnet_name subnet...\e[0m"
az network route-table create -g $rg -n $spoke1_vnet_name -l $location1 -o none
az network route-table route create -g $rg -n to-$onprem1_vnet_name --address-prefix $onprem1_vnet_address --next-hop-type VirtualAppliance --route-table-name $spoke1_vnet_name --next-hop-ip-address $hub1_gw_private_ip -o none
az network route-table route create -g $rg -n to-$spoke2_vnet_name --address-prefix $spoke2_vnet_address --next-hop-type VirtualAppliance --route-table-name $spoke1_vnet_name --next-hop-ip-address $hub1_gw_private_ip -o none
az network vnet subnet update -g $rg -n $spoke1_vm_subnet_name --vnet-name $spoke1_vnet_name --route-table $spoke1_vnet_name -o none

# spoke2 route table
echo -e "\e[1;36mDeploying $spoke2_vnet_name route table and attaching it to $spoke2_vm_subnet_name subnet...\e[0m"
az network route-table create -g $rg -n $spoke2_vnet_name -l $location2 -o none
az network route-table route create -g $rg -n to-$onprem1_vnet_name --address-prefix $onprem1_vnet_address --next-hop-type VirtualAppliance --route-table-name $spoke2_vnet_name --next-hop-ip-address $hub1_gw_private_ip -o none
az network route-table route create -g $rg -n to-$spoke1_vnet_name --address-prefix $spoke1_vnet_address --next-hop-type VirtualAppliance --route-table-name $spoke2_vnet_name --next-hop-ip-address $hub1_gw_private_ip -o none
az network vnet subnet update -g $rg -n $spoke2_vm_subnet_name --vnet-name $spoke2_vnet_name --route-table $spoke2_vnet_name -o none

#######################
# onprem1 VPN Config  #
#######################
echo -e "\e[1;36mCreating S2S/BGP VPN Config files for $onprem1_vnet_name Gateway VM...\e[0m"
# ipsec.secrets
psk_file=~/ipsec.secrets
cat <<EOF > $psk_file
$onprem1_gw_pubip $hub1_gw_pubip : PSK $psk
EOF

ipsec_file=~/ipsec.conf
cat <<EOF > $ipsec_file
conn $hub1_vnet_name-gw
 authby=secret
 auto=start
 left=%defaultroute
 leftid=$onprem1_gw_pubip
 leftsubnet=$onprem1_vnet_address
 right=$hub1_gw_pubip
 rightsubnet=$hub1_vnet_address,$spoke1_vnet_address,$spoke2_vnet_address
 type=tunnel
 keyexchange=ikev2
EOF

##### copy files to onprem gw
echo -e "\e[1;36mCopying and applying S2S VPN Config files to $onprem1_vnet_name-gw Gateway VM...\e[0m"
scp -o StrictHostKeyChecking=no $psk_file $ipsec_file $onprem1_gw_pubip:/home/$admin_username
scp -o StrictHostKeyChecking=no ~/.ssh/id_rsa $onprem1_gw_pubip:/home/$admin_username/.ssh/
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo mv /home/$admin_username/ipsec.* /etc/"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo ipsec restart"

# clean up
rm $psk_file $ipsec_file $cloudinit_file

#######################
# hub1 VPN Config  #
#######################
echo -e "\e[1;36mCreating S2S/BGP VPN Config files for $hub1_vnet_name Gateway VM...\e[0m"
# ipsec.secrets
psk_file=~/ipsec.secrets
cat <<EOF > $psk_file
$hub1_gw_pubip $onprem1_gw_pubip : PSK $psk
EOF

ipsec_file=~/ipsec.conf
cat <<EOF > $ipsec_file
config setup
 charondebug="all"

conn $onprem1_vnet_name-gw
 authby=secret
 auto=start
 left=%defaultroute
 leftid=$hub1_gw_pubip
 leftsubnet=$hub1_vnet_address,$spoke1_vnet_address,$spoke2_vnet_address
 right=$onprem1_gw_pubip
 rightsubnet=$onprem1_vnet_address
 type=tunnel
 keyexchange=ikev2
EOF

##### copy files to onprem gw
echo -e "\e[1;36mCopying and applying S2S VPN Config files to $hub1_vnet_name-gw Gateway VM...\e[0m"
scp -o StrictHostKeyChecking=no $psk_file $ipsec_file $hub1_gw_pubip:/home/$admin_username
scp -o StrictHostKeyChecking=no ~/.ssh/id_rsa $hub1_gw_pubip:/home/$admin_username/.ssh/
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_gw_pubip "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_gw_pubip "sudo mv /home/$admin_username/ipsec.* /etc/"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_gw_pubip "sudo systemctl restart ipsec && sudo systemctl enable ipsec"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub1_gw_pubip "sudo ipsec statusall"

ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "sudo ipsec statusall"
# clean up
rm $psk_file $ipsec_file

# check connectivity
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem1_gw_pubip "ping -c 3 $hub1_gw_private_ip && ping -c 3 $spoke1_private_ip && ping -c 3 $spoke2_private_ip"

# storage accounts
echo -e "\e[1;36mCreating storage account wad${location1}${spoke1_vnet_name}1 in $location1...\e[0m"
az storage account create -g $rg -n wad${location1}${spoke1_vnet_name}1 -l $location1 --sku Standard_LRS --kind StorageV2 -o none
s1id=$(az storage account show -g $rg -n wad${location1}${spoke1_vnet_name}1 --query id -o tsv | tr -d '\r') && echo $s1id

echo -e "\e[1;36mCreating storage account wad${location1}${spoke1_vnet_name}2 in $location2...\e[0m"
az storage account create -g $rg -n wad${location2}${spoke1_vnet_name}2 -l $location2 --sku Standard_LRS --kind StorageV2 -o none
s2id=$(az storage account show -g $rg -n wad${location2}${spoke1_vnet_name}2 --query id -o tsv | tr -d '\r') && echo $s2id

echo -e "\e[1;36mCreating storage account wad${location3}${spoke1_vnet_name}3 in $location3...\e[0m"
az storage account create -g $rg -n wad${location3}${spoke1_vnet_name}3 -l $location3 --sku Standard_LRS --kind StorageV2 -o none
s3id=$(az storage account show -g $rg -n wad${location3}${spoke1_vnet_name}3 --query id -o tsv | tr -d '\r') && echo $s3id

echo -e "\e[1;36mCreating storage account wad${location1}${spoke2_vnet_name}1 in $location1...\e[0m"
az storage account create -g $rg -n wad${location1}${spoke2_vnet_name}1 -l $location1 --sku Standard_LRS --kind StorageV2 -o none
s4id=$(az storage account show -g $rg -n wad${location1}${spoke2_vnet_name}1 --query id -o tsv | tr -d '\r') && echo $s4id

echo -e "\e[1;36mCreating storage account wad${location2}${spoke2_vnet_name}2 in $location2...\e[0m"
az storage account create -g $rg -n wad${location2}${spoke2_vnet_name}2 -l $location2 --sku Standard_LRS --kind StorageV2 -o none
s5id=$(az storage account show -g $rg -n wad${location2}${spoke2_vnet_name}2 --query id -o tsv | tr -d '\r') && echo $s5id

echo -e "\e[1;36mCreating storage account wad${location3}${spoke2_vnet_name}3 in $location3...\e[0m"
az storage account create -g $rg -n wad${location3}${spoke2_vnet_name}3 -l $location3 --sku Standard_LRS --kind StorageV2 -o none
s6id=$(az storage account show -g $rg -n wad${location3}${spoke2_vnet_name}3 --query id -o tsv | tr -d '\r') && echo $s6id

# storage account blob endpoints
echo -e "\e[1;36mGetting storage accounts blob endpoints...\e[0m"
b1=$(az storage account show -g $rg -n wad${location1}${spoke1_vnet_name}1 --query primaryEndpoints.blob -o tsv | tr -d '\r') && b1=${b1#https://} && b1=${b1%/} && echo $b1
b2=$(az storage account show -g $rg -n wad${location2}${spoke1_vnet_name}2 --query primaryEndpoints.blob -o tsv | tr -d '\r') && b2=${b2#https://} && b2=${b2%/} && echo $b2
b3=$(az storage account show -g $rg -n wad${location3}${spoke1_vnet_name}3 --query primaryEndpoints.blob -o tsv | tr -d '\r') && b3=${b3#https://} && b3=${b3%/} && echo $b3
b4=$(az storage account show -g $rg -n wad${location1}${spoke2_vnet_name}1 --query primaryEndpoints.blob -o tsv | tr -d '\r') && b4=${b4#https://} && b4=${b4%/} && echo $b4
b5=$(az storage account show -g $rg -n wad${location2}${spoke2_vnet_name}2 --query primaryEndpoints.blob -o tsv | tr -d '\r') && b5=${b5#https://} && b5=${b5%/} && echo $b5
b6=$(az storage account show -g $rg -n wad${location3}${spoke2_vnet_name}3 --query primaryEndpoints.blob -o tsv | tr -d '\r') && b6=${b6#https://} && b6=${b6%/} && echo $b6

######################################
# Diagnosis before private endpoints #
######################################
# sudo hping3 -S -p 443 -c 4 -q wadeastus2spoke12.blob.core.windows.net
# we could also use this command: { time nc -v -z $b1 443; } |& grep real | awk '{print $2}'
echo -e "\e[1;35mChecking latency from $hub1_vnet_name VM to all stroage accounts before creating private endpoints...\e[0m"

echo -e "\e[1;36mChecking latency from $onprem1_vnet_name-gw VM in $location1 to wad${location1}${spoke1_vnet_name}1 storage account in $location1...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b1"

echo -e "\e[1;36mChecking latency from $onprem1_vnet_name-gw VM in $location1 to wad${location1}${spoke1_vnet_name}2 storage account in $location2...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b2"

echo -e "\e[1;36mChecking latency from $onprem1_vnet_name-gw VM in $location1 to wad${location1}${spoke1_vnet_name}3 storage account in $location3...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b3"

echo -e "\e[1;36mChecking latency from $onprem1_vnet_name-gw VM in $location1 to wad${location1}${spoke2_vnet_name}1 storage account in $location1...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b4"

echo -e "\e[1;36mChecking latency from $onprem1_vnet_name-gw VM in $location1 to wad${location1}${spoke2_vnet_name}2 storage account in $location2...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b5"

echo -e "\e[1;36mChecking latency from $onprem1_vnet_name-gw VM in $location1 to wad${location1}${spoke2_vnet_name}3 storage account in $location3...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b6"


# private endpoints
echo -e "\e[1;36mCreating storage accounts blob private endpoints...\e[0m"
az network private-endpoint create -l $location1 -g $rg -n wad${location1}${spoke1_vnet_name}1-pe --connection-name wad${location1}${spoke1_vnet_name}1-pe-connection --nic-name wad${location1}${spoke1_vnet_name}1-pe-nic --private-connection-resource-id $s1id --group-id blob --subnet $spoke1_vm_subnet_name --vnet-name $spoke1_vnet_name -o none
az network private-endpoint create -l $location1 -g $rg -n wad${location2}${spoke1_vnet_name}2-pe --connection-name wad${location2}${spoke1_vnet_name}2-pe-connection --nic-name wad${location2}${spoke1_vnet_name}2-pe-nic --private-connection-resource-id $s2id --group-id blob --subnet $spoke1_vm_subnet_name --vnet-name $spoke1_vnet_name -o none
az network private-endpoint create -l $location1 -g $rg -n wad${location3}${spoke1_vnet_name}3-pe --connection-name wad${location3}${spoke1_vnet_name}3-pe-connection --nic-name wad${location3}${spoke1_vnet_name}3-pe-nic --private-connection-resource-id $s3id --group-id blob --subnet $spoke1_vm_subnet_name --vnet-name $spoke1_vnet_name -o none

az network private-endpoint create -l $location2 -g $rg -n wad${location1}${spoke2_vnet_name}1-pe --connection-name wad${location1}${spoke2_vnet_name}1-pe-connection --nic-name wad${location1}${spoke2_vnet_name}1-pe-nic --private-connection-resource-id $s4id --group-id blob --subnet $spoke2_vm_subnet_name --vnet-name $spoke2_vnet_name -o none
az network private-endpoint create -l $location2 -g $rg -n wad${location2}${spoke2_vnet_name}2-pe --connection-name wad${location2}${spoke2_vnet_name}2-pe-connection --nic-name wad${location2}${spoke2_vnet_name}2-pe-nic --private-connection-resource-id $s5id --group-id blob --subnet $spoke2_vm_subnet_name --vnet-name $spoke2_vnet_name -o none
az network private-endpoint create -l $location2 -g $rg -n wad${location3}${spoke2_vnet_name}3-pe --connection-name wad${location3}${spoke2_vnet_name}3-pe-connection --nic-name wad${location3}${spoke2_vnet_name}3-pe-nic --private-connection-resource-id $s6id --group-id blob --subnet $spoke2_vm_subnet_name --vnet-name $spoke2_vnet_name -o none

# configure private dns
echo -e "\e[1;36mCreating Private DNS Zone for storage accounts...\e[0m"
az network private-dns zone create -g $rg -n "privatelink.blob.core.windows.net" -o none
echo -e "\e[1;36mAssociating privatelink.blob.core.windows.net with $hub1_vnet_name, $spoke1_vnet_name and $spoke2_vnet_name...\e[0m"
az network private-dns link vnet create -g $rg --zone-name "privatelink.blob.core.windows.net" --name $spoke1_vnet_name-dns-link --virtual-network $spoke1_vnet_name --registration-enabled false -o none
az network private-dns link vnet create -g $rg --zone-name "privatelink.blob.core.windows.net" --name $spoke2_vnet_name-dns-link --virtual-network $spoke2_vnet_name --registration-enabled false -o none
az network private-dns link vnet create -g $rg --zone-name "privatelink.blob.core.windows.net" --name $hub1_vnet_name-dns-link --virtual-network $hub1_vnet_name --registration-enabled false -o none

echo -e "\e[1;36mCreating DNS records in privatelink.blob.core.windows.net for storage accounts...\e[0m"
az network private-endpoint dns-zone-group create -g $rg --endpoint-name wad${location1}${spoke1_vnet_name}1-pe --name zone-group --private-dns-zone "privatelink.blob.core.windows.net" --zone-name storage -o none
az network private-endpoint dns-zone-group create -g $rg --endpoint-name wad${location2}${spoke1_vnet_name}2-pe --name zone-group --private-dns-zone "privatelink.blob.core.windows.net" --zone-name storage -o none
az network private-endpoint dns-zone-group create -g $rg --endpoint-name wad${location3}${spoke1_vnet_name}3-pe --name zone-group --private-dns-zone "privatelink.blob.core.windows.net" --zone-name storage -o none

az network private-endpoint dns-zone-group create -g $rg --endpoint-name wad${location1}${spoke2_vnet_name}1-pe --name zone-group --private-dns-zone "privatelink.blob.core.windows.net" --zone-name storage -o none
az network private-endpoint dns-zone-group create -g $rg --endpoint-name wad${location2}${spoke2_vnet_name}2-pe --name zone-group --private-dns-zone "privatelink.blob.core.windows.net" --zone-name storage -o none
az network private-endpoint dns-zone-group create -g $rg --endpoint-name wad${location3}${spoke2_vnet_name}3-pe --name zone-group --private-dns-zone "privatelink.blob.core.windows.net" --zone-name storage -o none

# Getting private endpoint IPs
echo -e "\e[1;36mGetting the IPs of the storage accounts private endpoints...\e[0m"
b1ip=$(az network nic show -g $rg -n wad${location1}${spoke1_vnet_name}1-pe-nic --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo "wad${location1}${spoke1_vnet_name}1-pe private endpoint ip address is: $b1ip"
b2ip=$(az network nic show -g $rg -n wad${location2}${spoke1_vnet_name}2-pe-nic --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo "wad${location2}${spoke1_vnet_name}2-pe private endpoint ip address is: $b2ip"
b3ip=$(az network nic show -g $rg -n wad${location3}${spoke1_vnet_name}3-pe-nic --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo "wad${location3}${spoke1_vnet_name}3-pe private endpoint ip address is: $b3ip"
b4ip=$(az network nic show -g $rg -n wad${location1}${spoke2_vnet_name}1-pe-nic --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo "wad${location1}${spoke2_vnet_name}1-pe private endpoint ip address is: $b4ip"
b5ip=$(az network nic show -g $rg -n wad${location2}${spoke2_vnet_name}2-pe-nic --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo "wad${location2}${spoke2_vnet_name}2-pe private endpoint ip address is: $b5ip"
b6ip=$(az network nic show -g $rg -n wad${location3}${spoke2_vnet_name}3-pe-nic --query ipConfigurations[].privateIPAddress -o tsv | tr -d '\r') && echo "wad${location3}${spoke2_vnet_name}3-pe private endpoint ip address is: $b6ip"

# Updating hosts file in onprem1 gw
echo -e "\e[1;36mUpdating hosts file with private endpoint IPs in $onprem1_vnet_name-gw Gateway VM...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "echo "$b1ip $b1" | sudo tee -a /etc/hosts > /dev/null"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "echo "$b2ip $b2" | sudo tee -a /etc/hosts > /dev/null"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "echo "$b3ip $b3" | sudo tee -a /etc/hosts > /dev/null"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "echo "$b4ip $b4" | sudo tee -a /etc/hosts > /dev/null"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "echo "$b5ip $b5" | sudo tee -a /etc/hosts > /dev/null"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "echo "$b6ip $b6" | sudo tee -a /etc/hosts > /dev/null"

#####################################
# Diagnosis after private endpoints #
#####################################
echo -e "\e[1;35mChecking latency from $hub1_vnet_name VM to all stroage accounts after creating private endpoints...\e[0m"
echo -e "\e[1;38mLet's start with private endpoints in $spoke1_vnet_name...\e[0m"
echo -e "\e[1;36mChecking latency from $hub1_vnet_name VM in $location1 to wad${location1}${spoke1_vnet_name}1 and private endpoint in $location1 while storage account in $location1...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b1"

echo -e "\e[1;36mChecking latency from $hub1_vnet_name VM in $location1 to wad${location1}${spoke1_vnet_name}2 and private endpoint in $location1 while storage account in $location2...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b2"

echo -e "\e[1;36mChecking latency from $hub1_vnet_name VM in $location1 to wad${location1}${spoke1_vnet_name}3 and private endpoint in $location1 while storage account in $location3...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b3"

echo -e "\e[1;38mNow checking private endpoints in $spoke1_vnet_name...\e[0m"
echo -e "\e[1;36mChecking latency from $hub1_vnet_name VM in $location1 to wad${location1}${spoke2_vnet_name}1 and private endpoint in $location2 while storage account in $location1...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b4"

echo -e "\e[1;36mChecking latency from $hub1_vnet_name VM in $location1 to wad${location1}${spoke2_vnet_name}2 and private endpoint in $location2 while storage account in $location2...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b5"

echo -e "\e[1;36mChecking latency from $hub1_vnet_name VM in $location1 to wad${location1}${spoke2_vnet_name}3 and private endpoint in $location2 while storage account in $location3...\e[0m"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no "$onprem1_gw_pubip" "sudo hping3 -S -p 443 -c 4 -q $b6"

# Cleanup
# az group delete -g $rg --yes --no-wait -o none
